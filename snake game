"""
#import moduls necessery for the game.
import curses
import random

#initaiize the curses libarary to creat our screen.
screen = curses.initscr()

# hide the mouse curser.
curses.curs_set(0)

# getmax screen heidth and width.
screen_heidth, screen_width = screen.getmaxyx()

# create a new window.
window = curses.newwin(screen_heidth, screen_width, 0, 0)

# allow window recheive input from keyboard.
window.keypad(1)

# set the delay for updating the screen.
window.timeout(150)

# set x,y coordinates of the initail position of snake's head.
snk_x = screen_width // 4
snk_y = screen_heidth // 2
# define the initail position of the snake's body.
snake = [[snk_y, snk_x], [snk_y, snk_x - 1], [snk_y, snk_x - 2]]

# creat the food in the middle of window.
food = [screen_heidth // 2, screen_width // 2]

# Add the food by usining PI chracter from curses mudels.
window.addch(food[0], food[1], curses.ACS_PI)

# set initail movment direction to right.
key = curses.KEY_RIGHT

# creat game loop that game forever until the player loss or quit the game.
while True:
  # get the next key that will be pressed by user.
  next_key = window.getch()
  # if user dosen't input anything,key remains same,key will be set to the new peressed key.
  key = key if next_key == -1 else next_key

  # check if snake collided with the wallsor itself.
  if snake[0][0] in [0, screen_heidth] or snake[0][1] in [
      0, screen_width
  ] or snake[0] in snake[1:]:
    curses.endwin()  # closing the window
    quit()  # exit the program
#set the new position of the snake head based on the diraction.
  new_head = [snake[0][0], snake[0][1]]

  if key == curses.KEY_DOWN:
    new_head[0] += 1
  if key == curses.KEY_UP:
    new_head[0] -= 1
  if key == curses.KEY_RIGHT:
    new_head[0] += 1
  if key == curses.KEY_LEFT:
    new_head[0] -= 1

#insert the new Head to the first position of snake.
  snake.insert(0, new_head)

  #check if snake ate the food.
  if snake[0] == food:
    food = None  # remove food if snake ate it.
    while food is None:
      new_food = [
        random.randint(1, screen_heidth - 1),
        random.randint(1, screen_width - 1)
      ]
      food = new_food if new_food not in snake else None
    window.addch(food[0], food[1], curses.ACS_PI)
#while food is removed, genarate new food in a random place on screen.

  else:
    #otherwise remove the last segment of snake body.
    tail = snake.pop()
    window.addch(tail[0], tail[1], ' ')

# update the position of the snake on the screen
  window.addch(snake[0][0], snake[0][1], curses.ACS_CKBOARD)
"""













#customize snake game.

# Python Snake
from tkinter import *
import random

GAME_WIDTH = 700
GAME_HEIGHT = 700
SPEED = 170
SPACE_SIZE = 50
BODY_PARTS = 3
SNAKE_COLOR = "#00FF00"
FOOD_COLOR = "#FF0000"
BACKGROUND_COLOR = "#000000"


class Snake:

    def __init__(self):
        self.body_size = BODY_PARTS
        self.coordinates = []
        self.squares = []

        for i in range(0, BODY_PARTS):
            self.coordinates.append([0, 0])

        for x, y in self.coordinates:
            square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR, tag="snake")
            self.squares.append(square)


class Food:

    def __init__(self):

        x = random.randint(0, (GAME_WIDTH / SPACE_SIZE)-1) * SPACE_SIZE
        y = random.randint(0, (GAME_HEIGHT / SPACE_SIZE) - 1) * SPACE_SIZE

        self.coordinates = [x, y]

        canvas.create_oval(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=FOOD_COLOR, tag="food")


def next_turn(snake, food):

    x, y = snake.coordinates[0]

    if direction == "up":
        y -= SPACE_SIZE
    elif direction == "down":
        y += SPACE_SIZE
    elif direction == "left":
        x -= SPACE_SIZE
    elif direction == "right":
        x += SPACE_SIZE

    snake.coordinates.insert(0, (x, y))

    square = canvas.create_rectangle(x, y, x + SPACE_SIZE, y + SPACE_SIZE, fill=SNAKE_COLOR)

    snake.squares.insert(0, square)

    if x == food.coordinates[0] and y == food.coordinates[1]:

        global score

        score += 1

        label.config(text="Score:{}".format(score))

        canvas.delete("food")

        food = Food()

    else:

        del snake.coordinates[-1]

        canvas.delete(snake.squares[-1])

        del snake.squares[-1]

    if check_collisions(snake):
        game_over()

    else:
        window.after(SPEED, next_turn, snake, food)


def change_direction(new_direction):

    global direction

    if new_direction == 'left':
        if direction != 'right':
            direction = new_direction
    elif new_direction == 'right':
        if direction != 'left':
            direction = new_direction
    elif new_direction == 'up':
        if direction != 'down':
            direction = new_direction
    elif new_direction == 'down':
        if direction != 'up':
            direction = new_direction


def check_collisions(snake):

    x, y = snake.coordinates[0]

    if x < 0 or x >= GAME_WIDTH:
        return True
    elif y < 0 or y >= GAME_HEIGHT:
        return True

    for body_part in snake.coordinates[1:]:
        if x == body_part[0] and y == body_part[1]:
            return True

    return False


def game_over():

    canvas.delete(ALL)
    canvas.create_text(canvas.winfo_width()/2, canvas.winfo_height()/2,
                       font=('consolas',70), text="GAME OVER", fill="red", tag="gameover")


window = Tk()
window.title("Snake game")
window.resizable(False, False)

score = 0
direction = 'down'

label = Label(window, text="Score:{}".format(score), font=('consolas', 40))
label.pack()

canvas = Canvas(window, bg=BACKGROUND_COLOR, height=GAME_HEIGHT, width=GAME_WIDTH)
canvas.pack()

window.update()

window_width = window.winfo_width()
window_height = window.winfo_height()
screen_width = window.winfo_screenwidth()
screen_height = window.winfo_screenheight()

x = int((screen_width/2) - (window_width/2))
y = int((screen_height/2) - (window_height/2))

window.geometry(f"{window_width}x{window_height}+{x}+{y}")

window.bind('<Left>', lambda event: change_direction('left'))
window.bind('<Right>', lambda event: change_direction('right'))
window.bind('<Up>', lambda event: change_direction('up'))
window.bind('<Down>', lambda event: change_direction('down'))

snake = Snake()
food = Food()

next_turn(snake, food)

window.mainloop()



